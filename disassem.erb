<!doctype html>
<html>
<head>
<!--
    Name: Yuesong Huang, Wentao Jiang
    Email: yhu116@u.rochester.edu, wjiang20@u.rochester.edu
-->
<style>
button {
    border: none;
    margin: 0;
    font-family: "Courier New", "Courier", "monospace";
    background-color:#fcdfff;
}
button[onclick] {
    background-color:#f9b7ff;
}
button[onclick]:hover {
    background-color:#50ebec;
}
#assembly {
    height: 88vh;
    overflow-x: scroll;
    font-family: "Courier New", "Courier", "monospace";
    font-size: 80%;
    white-space: pre;
}
#source {
    height: 88vh;
    overflow-x: scroll;
    font-family: "Courier New", "Courier", "monospace";
    font-size: 80%;
    white-space: pre;
}
table {
    border-spacing: 0;
    overflow-y: scroll;
}
th {
    font-size: 150%;
    vertical-align: top;
    height: 35px;
}
td {
    padding: 0 15px 0 0;
}
</style>
</head>

<body>
<script>
// scroll line into the middle of its respective subwindow
function reveal(line) {
    const element = document.getElementById(line);
    element.scrollIntoView({
        behavior: 'auto',
        block: 'center',
        inline: 'center'
    });
}
// green-highlight aline,
// yellow-highlight all source lines that contributed to aline,
// and scroll sline into view
function aclick(aline, sline) {
    const srcLines = document.querySelectorAll("span[aline]");  // slines have an aline list
    const asmLines = document.querySelectorAll("span[sline]");  // alines have an sline list
    // clear all assembly lines
    asmLines.forEach((l) => {
        l.style.backgroundColor = 'white';
    })
    srcLines.forEach((sl) => {
        if (sl.matches("span[aline~="+aline+"]")) {
            sl.style.backgroundColor = 'yellow';
            asmLines.forEach((al) => {
                if (al.matches("span[sline~="+sl.id+"]")) {
                    al.style.backgroundColor = 'PapayaWhip';
                }
            })
        } else {
            sl.style.backgroundColor = 'white';
        }
    })
    const l = document.getElementById(aline);
    l.style.backgroundColor = 'palegreen';
    reveal(sline);
}
function akeydown(currentLineNum, index) {
    // Find the corresponding source line ID from the 'aline' attribute
    let newLineNum = currentLineNum + index;
    while (true) {
        const aline = 'a' + newLineNum;
        const newLine = document.getElementById(aline);
        if (!newLine) {
            break;
        }

        const sline = newLine.getAttribute('sline').split(' ')[0];
        if (sline.length !== 0) {
            aclick(aline, sline);
            reveal(aline);
            break;
        }
        newLineNum += index;
    }
}
// green-highlight sline,
// yellow-highlight all assembly lines that correspond to sline,
// and scroll aline into view
function sclick(sline, aline) {
    const asmLines = document.querySelectorAll("span[sline]");  // alines have an sline list
    const srcLines = document.querySelectorAll("span[aline]");  // slines have an aline list
    // clear all source lines
    srcLines.forEach((l) => {
        l.style.backgroundColor = 'white';
    })
    asmLines.forEach((l) => {
        if (l.matches("span[sline~="+sline+"]")) {
            l.style.backgroundColor = 'yellow';
        } else {
            l.style.backgroundColor = 'white';
        }
    })
    const l = document.getElementById(sline);
    l.style.backgroundColor = 'palegreen';
    reveal(aline);
}
function skeydown(currentLineNum, index) {
    // Find the corresponding source line ID from the 'sline' attribute
    let newLineNum = currentLineNum + index;
    while (true) {
        const sline = 's' + newLineNum;
        const newLine = document.getElementById(sline);
        if (!newLine) {
            break;
        }

        const aline = newLine.getAttribute('aline').split(' ')[0];
        if (aline.length !== 0) {
            sclick(sline, aline);
            reveal(sline);
            break;
        }
        newLineNum += index;
    }
}
document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
        // Find the currently selected assembly line
        let currentLine;
        document.querySelectorAll("span").forEach(span => {
            if (span.style.backgroundColor === 'palegreen') {
                currentLine = span;
            }
        });

        if (currentLine) {
            const currentLineId = currentLine.id;
            const currentLineNum = parseInt(currentLineId.substring(1));

            // Find the new line to highlight
            if (event.key === 'ArrowUp') {
                if (currentLineId.startsWith('s')) {
                    skeydown(currentLineNum, -1);
                } else if (currentLineId.startsWith('a')) {
                    akeydown(currentLineNum, -1);
                }
            } else if (event.key === 'ArrowDown') {
                if (currentLineId.startsWith('s')) {
                    skeydown(currentLineNum, 1);
                } else if (currentLineId.startsWith('a')) {
                    akeydown(currentLineNum, 1);
                }
            }
        }
    }
});
</script>

<h1><%= @h1_name %></h1>

<table style="width:100%; table-layout:fixed">
<tr>
<th style="width:55%">
source code
</th>
<th style="width:1%"></th>
<th style="width:44%">
assembly
</th>
</tr>
<tr>
<td style="overflow-x:scroll; vertical-align:top">
<div id="source"><%
    @source_table.each do |line_num, stmt| %><%
        if @source_assembly[line_num].empty? %>
<button><%= indent_to_html(line_num, @source_table.length) %><%= line_num %></button> <span id="s<%= line_num %>" aline=""><%= stmt %></span><%
        else %>
<button onclick="sclick('s<%= line_num %>','a<%= @source_assembly[line_num].first %>')"><%= indent_to_html(line_num, @source_table.length) %><%= line_num %></button> <span id="s<%= line_num %>" aline="<%= @source_assembly[line_num].map { |num| "a#{num}" }.join(' ') %>"><%= stmt %></span><%
        end %><%
    end %></div>
</td>
<td></td>
<td style="overflow-x:scroll; vertical-align:top">
<div id="assembly"><%
    @assembly_table.each do |func_name, stmt_list| %>
<%= func_name %>
        <% stmt_list.each do |line_num, stmt| %>
<button onclick="aclick('a<%= line_num %>','s<%= @assembly_source[line_num].first %>')"><%= stmt.first %></button> <span id="a<%= line_num %>" sline="<%= @assembly_source[line_num].map { |num| "s#{num}" }.join(" ") %>"><%= stmt.last %></span><%
        end %>
<% end %></div>
</td>
</tr>
</table>

</body>
</html>
